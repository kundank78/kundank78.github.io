"use strict";(self.webpackChunkkundan_dev=self.webpackChunkkundan_dev||[]).push([[36],{3905:function(e,n,a){a.d(n,{Zo:function(){return c},kt:function(){return d}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=t.createContext({}),p=function(e){var n=t.useContext(m),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(m.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,k=u["".concat(m,".").concat(d)]||u[d]||s[d]||i;return a?t.createElement(k,o(o({ref:n},c),{},{components:a})):t.createElement(k,o({ref:n},c))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5977:function(e,n,a){a.r(n),a.d(n,{assets:function(){return c},contentTitle:function(){return m},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s}});var t=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],l={slug:"cheeat-sheet-ckad",title:"Cheat Sheet for CKAD",author:"Kundan Kumar",author_url:"https://github.com/kundank78",author_title:"Software Engineer at JP Morgan",author_image_url:"https://avatars.githubusercontent.com/u/25195457",tags:["go","bittorrent"]},m=void 0,p={permalink:"/blog/cheeat-sheet-ckad",source:"@site/blog/2023-03-16-ckad-notes.md",title:"Cheat Sheet for CKAD",description:"I got my CKAD certification in Dec, 2022 and I faced difficulty memorizing all the k8s object yamls & imperative commands. Cracking CKAD needs crystal k8s concepts along with bit of a practice K8s commands. Sharing below notes taken during my preparation.",date:"2023-03-16T00:00:00.000Z",formattedDate:"March 16, 2023",tags:[{label:"go",permalink:"/blog/tags/go"},{label:"bittorrent",permalink:"/blog/tags/bittorrent"}],readingTime:5.135,hasTruncateMarker:!0,authors:[{name:"Kundan Kumar",title:"Software Engineer at JP Morgan",url:"https://github.com/kundank78",imageURL:"https://avatars.githubusercontent.com/u/25195457"}],frontMatter:{slug:"cheeat-sheet-ckad",title:"Cheat Sheet for CKAD",author:"Kundan Kumar",author_url:"https://github.com/kundank78",author_title:"Software Engineer at JP Morgan",author_image_url:"https://avatars.githubusercontent.com/u/25195457",tags:["go","bittorrent"]},nextItem:{title:"GitHub Action for Docusaurus",permalink:"/blog/docusaurus-gh-action"}},c={authorsImageUrls:[void 0]},s=[{value:"Setting Alias ..... A Must",id:"setting-alias--a-must",level:3},{value:"K8s Cluster &amp; Namespace Commands",id:"k8s-cluster--namespace-commands",level:3},{value:"ReplicaSet",id:"replicaset",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Namespace",id:"namespace",level:3},{value:"Pods Configuration",id:"pods-configuration",level:3},{value:"Multi container pod: share same lifecycle &amp; network",id:"multi-container-pod-share-same-lifecycle--network",level:5},{value:"Taint Node",id:"taint-node",level:5},{value:"Config Map",id:"config-map",level:3},{value:"Secrets",id:"secrets",level:3},{value:"Jobs &amp; CronJob",id:"jobs--cronjob",level:3}],u={toc:s};function d(e){var n=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"I got my CKAD certification in Dec, 2022 and I faced difficulty memorizing all the k8s object yamls & imperative commands. Cracking CKAD needs crystal k8s concepts along with bit of a practice K8s commands. Sharing below notes taken during my preparation."),(0,i.kt)("h3",{id:"setting-alias--a-must"},"Setting Alias ..... A Must"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'alias k=kubectl\n\nexport do="--dry-run=client -o yaml" \nk create deploy nginx --image=nginx $do\n\nexport now="--force --grace-period 0"\nk delete pod pod_name $now\n\n')),(0,i.kt)("h3",{id:"k8s-cluster--namespace-commands"},"K8s Cluster & Namespace Commands"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k cluster-info")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k get nodes"))),(0,i.kt)("h3",{id:"replicaset"},"ReplicaSet"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k get rs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k scale --replicas=new_number rs replica_set_name"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: replica_set_name\n  labels:\n    key: value\nspec:\n  replicas: no_of_pods\n  selector:  #used to identify existing pods in env\n    matchLabels:\n      key: value\n  template:\n    metadata:\n      name: pod_name\n      labels:\n        key: value\n    spec:\n      containers:\n        - name: container_name\n          image: image_name\n")),(0,i.kt)("h3",{id:"deployment"},"Deployment"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k create deploy deployment_name --image=image_name --replicas=no_of_pods*"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k scale deploy deploy_name --replicas=no_of_pods*"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k edit deploy deploy_name*"),"                                              ----\x3e edit any field of deployment")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k set image deploy deploy_name container_name=nginx:1.9.1 --record*"),"     ----\x3e changed image to different version with record flag capturing cmd used")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k rollout status deploy deploy_name*"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k rollout history deploy deploy_name*"),"                                   ----\x3e show revisions of deployment")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k rollout undo deploy deploy_name*"),"                                      ----\x3e undo deployment to last revision")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k rollout history deploy deploy_name --revision=number*"),"                 ----\x3e describe deployment of revision number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k rollout undo deploy deploy_name --to-revision=number*"),"                 ----\x3e rollback deployment to specific version"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: deployment_name\n  labels:\n    key: value\nspec:\n  replicas: no_of_pods\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  selectors:\n    matchLabels:\n      key: value\n  template:\n    metadata:\n      name: pod_name\n      labels:\n        key: value\n    spec:\n      containers:\n        - name: container_name\n          image: image_name\n          ports:\n            - containerPort: 8080\n")),(0,i.kt)("h3",{id:"namespace"},"Namespace"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*k config set-context --current --namespace=namespace_name*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*k port-forward svc/my-service 5000*"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'---\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-quota\n  namespace: dev\nspec:\n  hard:\n    pods: "10"\n    requests:\n      cpu: "4"\n      memory: "5Gi"\n    limits:\n      cpu: "10"\n      memory: 10Gi\n')),(0,i.kt)("h3",{id:"pods-configuration"},"Pods Configuration"),(0,i.kt)("h5",{id:"multi-container-pod-share-same-lifecycle--network"},"Multi container pod: share same lifecycle & network"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Patterns: Side Car, Ambassador, Adapter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"POD Conditions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"PodScheduled -> Initialized -> ContainersReady -> Ready")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k logs -f pod_name container_name*"),"               # tail logs for container_name for multi container pod")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k replace -f pod.yaml --force*"),"                   # replace existing pod with new one")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k get pods -l key=value --no-headers | wc -l*"),"    # count of pod")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*k get pod --show-labels*"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},'*k label po -l "app in(v1,v2)" tier=web*')))),(0,i.kt)("h5",{id:"taint-node"},"Taint Node"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*k taint node node_name key=value:taint-effect*"),"  | Effects: NoSchedule, PreferNoSchedule, NoExecute"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*k taint node node_name key=value:taint-effect-*")," | Remove taint"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*k label node node_name key=value*"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod_name\n  labels:\n    key: value\n  annotations:\n    buildVersion: 1.34\n  namespace: ns_name\nspec:\n  restartPolicy: Always                   # Always by default, Never & OnFailure\n  serviceAccountName: service_acc_nm      # cannot be edited in pod but in deployment this can be edited and deployment will handle rollout for us\n  automountServiceAccountToken: false     # doesn\'t mount default service account\n  securityContext:                        # pod level security context, can be moved to container level\n    runAsUser: 1000\n  volumes:\n    - name: pvc_volume\n      persistentVolumeClaim:\n        claimName: pvc_name\n    - name: config_map_volume\n      configMap:\n        name: config_map_name\n    - name: secret_volume                 # creates file for each key & value as secret\n      secret:\n        secretName: secret_name\n    - name: empty_dir_vol                 # exists as long as pod on node disk, ram or network storage\n      emptyDir:\n        sizeLimit: 500Mi\n    - name: host_volume\n      hostPath:                           # mount file or directory from host node\'s filesystem\n        type: Directory | DirectoryOrCreate\n        path: /data\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:    # preferredDuringSchedulingIgnoredDuringExecution\n        nodeSelectorTerms:\n          - matchExpressions:\n              - key: size\n                operator: NotIn                          # In, NotIn, Exists, DoesNotExist, Gt and Lt.\n                values:\n                  - Small\n  initContainers:\n    - name: install\n      image: image_name\n  containers:\n    - name: container_name\n      image: image_name\n      ports:\n        - containerPort: port to expose\n      command: ["sleep2.0"]               # overrides the entrypoint in docker\n      args: ["10"]                        # adds as param in docker run cmd\n      resources:                          # Scheduled on node if sum of requests of all container is less than node limit\n        requests:\n          cpu: "1"                        # "1" -> 1000m | 1m -> 1v cpu aws | If request not specified, it matches limit (same for memory)\n          memory: "512Mi"\n        limits:                           # container cannot exceeds its cpu limit    \n          cpu: "2"                        # container can use more memory than limit but if it is continuous it will terminate | If limit not specified, \n          memory: "1Gi"                     it can use all of node\'s memory and finally get killed | If limit range is defined for namespace it uses it as default\n      securityContext:\n        capabilities:\n          add: [ "MAC_ADMIN" ]\n      volumeMounts:\n        - mountPath: /opt                 # this will be in sync\n          name: volume_name\n      env:                                # adding env variables\n        - name: APP_COLOR\n          value: pink\n        - name: APP_COLOR\n          valueFrom:\n            configMapKeyRef:\n              name: config_map_name\n              key: KEY1\n        - name: APP_COLOR\n          valueFrom:\n            secretKeyRef:\n              name: secret_name\n              key: KEY1\n      envFrom:\n        - configMapRef:\n            name: config_map_name\n        - secretRef:\n            name: secret_name\n      tolerations:\n        - key: "app"\n          operator: "Equal"\n          value: "blue"\n          effect: "NoSchedule"\n      nodeSelector:                         # label node with same\n        key: value\n      readinessProbe:\n        periodSeconds: 5\n        initialDelaySeconds: 15\n        failureThreshold: 8\n        httpGet:\n          path: /api/ready\n          port: 5000\n        tcpSocket:\n          port: 8080\n        exec:\n          command:\n            - cat\n            - /app/is_ready\n      livenessProbe:\n        periodSeconds: 5\n        initialDelaySeconds: 15\n        failureThreshold: 8\n        httpGet:\n          path: /api/ready\n          port: 5000\n        tcpSocket:\n          port: 8080\n        exec:\n          command:\n            - cat\n            - /app/is_ready\n')),(0,i.kt)("h3",{id:"config-map"},"Config Map"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*k create configmap config_map_name --from-literal=KEY1=VALUE1 --from-literal=KEY2=VALUE2*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*k create configmap config_map_name --from-file=file_name.properties*"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config_map_name\nspec:\n  key1: value1\n  key2: value2\n")),(0,i.kt)("h3",{id:"secrets"},"Secrets"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*echo -n 'encode' | base64*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*echo -n 'decode' | base64 --decode*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*k create secret secret_name --from-literal=KEY1=VALUE1 --from-literal=KEY2=VALUE2*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*k create secret secret_name --from-file=file_name.properties*"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: secret_name\nspec:\n  key1: value1\n  key2: value2\n")),(0,i.kt)("h3",{id:"jobs--cronjob"},"Jobs & CronJob"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*k create job job_name --image=image_name -- command*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'*k create cronjob cron_name --image=image_name --schedule="* * * * *"*'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: job_name\nspec:\n  completions: 3                            ----\x3e no. of successful job completions | new pods are created until this number is reached\n  parallelism: 3                            ----\x3e creates pods in parallel\n  template:\n    spec:\n      containers:\n        - name: container_name\n          image: image_name\n          command:\n            - cmd1\n      restartPolicy: Never\n\n---\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: cron-job-name\nspec:\n  schedule: "*/1 * * * *"\n  jobTemplate:\n    spec:\n      completions: 3\n      parallelism: 3\n      template:\n        spec:\n          containers:\n            - name: container_name\n              image: image_name\n          restartPolicy: Never\n')))}d.isMDXComponent=!0}}]);