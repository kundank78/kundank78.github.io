"use strict";(self.webpackChunkkundan_dev=self.webpackChunkkundan_dev||[]).push([[36],{3905:function(e,n,a){a.d(n,{Zo:function(){return c},kt:function(){return u}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),u=r,k=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return a?t.createElement(k,o(o({ref:n},c),{},{components:a})):t.createElement(k,o({ref:n},c))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5977:function(e,n,a){a.r(n),a.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var t=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],l={slug:"cheat-sheet-ckad",title:"Cheat Sheet for CKAD",author:"Kundan Kumar",author_url:"https://github.com/kundank78",author_title:"Software Engineer at JP Morgan",author_image_url:"https://avatars.githubusercontent.com/u/25195457",tags:["ckad","kubernetes"]},s=void 0,p={permalink:"/blog/cheat-sheet-ckad",source:"@site/blog/2023-03-16-ckad-notes.md",title:"Cheat Sheet for CKAD",description:"Cracking CKAD examination requires not only a solid comprehension of Kubernetes concepts but also proficiency in executing K8 commands. In this following, I have shared notes which I took during my CKAD preparation. I faced difficulty memorizing all Kubernetes object YAMLs and imperative commands, I consolidate all configurations in a single location as a comprehensive revision guide before the exam. I hope these notes can help you out too!",date:"2023-03-16T00:00:00.000Z",formattedDate:"March 16, 2023",tags:[{label:"ckad",permalink:"/blog/tags/ckad"},{label:"kubernetes",permalink:"/blog/tags/kubernetes"}],readingTime:9.97,hasTruncateMarker:!0,authors:[{name:"Kundan Kumar",title:"Software Engineer at JP Morgan",url:"https://github.com/kundank78",imageURL:"https://avatars.githubusercontent.com/u/25195457"}],frontMatter:{slug:"cheat-sheet-ckad",title:"Cheat Sheet for CKAD",author:"Kundan Kumar",author_url:"https://github.com/kundank78",author_title:"Software Engineer at JP Morgan",author_image_url:"https://avatars.githubusercontent.com/u/25195457",tags:["ckad","kubernetes"]},nextItem:{title:"GitHub Action for Docusaurus",permalink:"/blog/docusaurus-gh-action"}},c={authorsImageUrls:[void 0]},m=[{value:"Setting Alias ..... A Must",id:"setting-alias--a-must",level:3},{value:"K8s Cluster",id:"k8s-cluster",level:3},{value:"ReplicaSet",id:"replicaset",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Namespace",id:"namespace",level:3},{value:"Pods Configuration",id:"pods-configuration",level:3},{value:"Multi container pod: share same lifecycle &amp; network",id:"multi-container-pod-share-same-lifecycle--network",level:5},{value:"Taint Node",id:"taint-node",level:5},{value:"Config Map",id:"config-map",level:3},{value:"Secrets",id:"secrets",level:3},{value:"Service Accounts",id:"service-accounts",level:3},{value:"Jobs &amp; CronJob",id:"jobs--cronjob",level:3},{value:"Service",id:"service",level:3},{value:"Load Balancing through services is done in random fashion",id:"load-balancing-through-services-is-done-in-random-fashion",level:5},{value:"ClusterIP : creates a virtual ip",id:"clusterip--creates-a-virtual-ip",level:5},{value:"LoadBalancer",id:"loadbalancer",level:5},{value:"NodePort (Range: 30000 - 32767): Exposes node port for every node if pods are distributed",id:"nodeport-range-30000---32767-exposes-node-port-for-every-node-if-pods-are-distributed",level:5},{value:"Ingress",id:"ingress",level:3},{value:"Network Policy",id:"network-policy",level:3},{value:"Volumes",id:"volumes",level:3},{value:"Kube API Server &amp; API Groups",id:"kube-api-server--api-groups",level:3},{value:"Edit the kube-apiserver static pod configured by kubeadm to pass in the user details.",id:"edit-the-kube-apiserver-static-pod-configured-by-kubeadm-to-pass-in-the-user-details",level:5},{value:"The file is located at /etc/kubernetes/manifests/kube-apiserver.yaml",id:"the-file-is-located-at-etckubernetesmanifestskube-apiserveryaml",level:5},{value:"API Groups",id:"api-groups",level:3},{value:"Roles",id:"roles",level:3},{value:"API Versions",id:"api-versions",level:3},{value:"vXalphaY --&gt; vXbetaY --&gt; vX",id:"vxalphay----vxbetay----vx",level:5},{value:"Alpha -&gt; Not enabled by default",id:"alpha---not-enabled-by-default",level:5},{value:"Beta -&gt; Enabled by default",id:"beta---enabled-by-default",level:5},{value:"GA(Stable) -&gt; Enabled by default",id:"gastable---enabled-by-default",level:5},{value:"Preferred version -&gt; version k8s will use while retrieving info",id:"preferred-version---version-k8s-will-use-while-retrieving-info",level:5},{value:"Storage Version -&gt; version objects will converted to while storing in etcd cluster",id:"storage-version---version-objects-will-converted-to-while-storing-in-etcd-cluster",level:5},{value:"API Deprecations",id:"api-deprecations",level:3},{value:"Helm",id:"helm",level:3}],d={toc:m};function u(e){var n=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Cracking CKAD examination requires not only a solid comprehension of Kubernetes concepts but also proficiency in executing K8 commands. In this following, I have shared notes which I took during my CKAD preparation. I faced difficulty memorizing all Kubernetes object YAMLs and imperative commands, I consolidate all configurations in a single location as a comprehensive revision guide before the exam. I hope these notes can help you out too!"),(0,i.kt)("h3",{id:"setting-alias--a-must"},"Setting Alias ..... A Must"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'alias k=kubectl\n\nexport do="--dry-run=client -o yaml" \nk create deploy nginx --image=nginx $do\n\nexport now="--force --grace-period 0"\nk delete pod pod_name $now\n\n')),(0,i.kt)("h3",{id:"k8s-cluster"},"K8s Cluster"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k cluster-info")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k get nodes"))),(0,i.kt)("h3",{id:"replicaset"},"ReplicaSet"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k get rs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k scale --replicas=new_number rs replica_set_name"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: replica_set_name\n  labels:\n    key: value\nspec:\n  replicas: no_of_pods\n  selector:  #used to identify existing pods in env\n    matchLabels:\n      key: value\n  template:\n    metadata:\n      name: pod_name\n      labels:\n        key: value\n    spec:\n      containers:\n        - name: container_name\n          image: image_name\n")),(0,i.kt)("h3",{id:"deployment"},"Deployment"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k create deploy deployment_name --image=image_name --replicas=no_of_pods"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k scale deploy deploy_name --replicas=no_of_pods"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k edit deploy deploy_name"),"                                              ----\x3e edit any field of deployment")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k set image deploy deploy_name container_name=nginx:1.9.1 --record"),"     ----\x3e changed image to different version with record flag capturing cmd used")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k rollout status deploy deploy_name"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k rollout history deploy deploy_name"),"                                   ----\x3e show revisions of deployment")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k rollout undo deploy deploy_name"),"                                      ----\x3e undo deployment to last revision")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k rollout history deploy deploy_name --revision=number"),"                 ----\x3e describe deployment of revision number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k rollout undo deploy deploy_name --to-revision=number"),"                 ----\x3e rollback deployment to specific version"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: deployment_name\n  labels:\n    key: value\nspec:\n  replicas: no_of_pods\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  selectors:\n    matchLabels:\n      key: value\n  template:\n    metadata:\n      name: pod_name\n      labels:\n        key: value\n    spec:\n      containers:\n        - name: container_name\n          image: image_name\n          ports:\n            - containerPort: 8080\n")),(0,i.kt)("h3",{id:"namespace"},"Namespace"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k config set-context --current --namespace=namespace_name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k port-forward svc/my-service 5000"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'---\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-quota\n  namespace: dev\nspec:\n  hard:\n    pods: "10"\n    requests:\n      cpu: "4"\n      memory: "5Gi"\n    limits:\n      cpu: "10"\n      memory: 10Gi\n')),(0,i.kt)("h3",{id:"pods-configuration"},"Pods Configuration"),(0,i.kt)("h5",{id:"multi-container-pod-share-same-lifecycle--network"},"Multi container pod: share same lifecycle & network"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Patterns: Side Car, Ambassador, Adapter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"POD Conditions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"PodScheduled -> Initialized -> ContainersReady -> Ready")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k logs -f pod_name container_name"),"               # tail logs for container_name for multi container pod")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k replace -f pod.yaml --force"),"                   # replace existing pod with new one")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k get pods -l key=value --no-headers | wc -l"),"    # count of pod")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k get pod --show-labels"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},'k label po -l "app in(v1,v2)" tier=web')))),(0,i.kt)("h5",{id:"taint-node"},"Taint Node"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k taint node node_name key=value:taint-effect"),"  | Effects: NoSchedule, PreferNoSchedule, NoExecute"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k taint node node_name key=value:taint-effect-")," | Remove taint"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k label node node_name key=value"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod_name\n  labels:\n    key: value\n  annotations:\n    buildVersion: 1.34\n  namespace: ns_name\nspec:\n  restartPolicy: Always                   # Always by default, Never & OnFailure\n  serviceAccountName: service_acc_nm      # cannot be edited in pod but in deployment this can be edited and deployment will handle rollout for us\n  automountServiceAccountToken: false     # doesn\'t mount default service account\n  securityContext:                        # pod level security context, can be moved to container level\n    runAsUser: 1000\n  volumes:\n    - name: pvc_volume\n      persistentVolumeClaim:\n        claimName: pvc_name\n    - name: config_map_volume\n      configMap:\n        name: config_map_name\n    - name: secret_volume                 # creates file for each key & value as secret\n      secret:\n        secretName: secret_name\n    - name: empty_dir_vol                 # exists as long as pod on node disk, ram or network storage\n      emptyDir:\n        sizeLimit: 500Mi\n    - name: host_volume\n      hostPath:                           # mount file or directory from host node\'s filesystem\n        type: Directory | DirectoryOrCreate\n        path: /data\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:    # preferredDuringSchedulingIgnoredDuringExecution\n        nodeSelectorTerms:\n          - matchExpressions:\n              - key: size\n                operator: NotIn                          # In, NotIn, Exists, DoesNotExist, Gt and Lt.\n                values:\n                  - Small\n  initContainers:\n    - name: install\n      image: image_name\n  containers:\n    - name: container_name\n      image: image_name\n      ports:\n        - containerPort: port to expose\n      command: ["sleep2.0"]               # overrides the entrypoint in docker\n      args: ["10"]                        # adds as param in docker run cmd\n      resources:                          # Scheduled on node if sum of requests of all container is less than node limit\n        requests:\n          cpu: "1"                        # "1" -> 1000m | 1m -> 1v cpu aws | If request not specified, it matches limit (same for memory)\n          memory: "512Mi"\n        limits:                           # container cannot exceeds its cpu limit    \n          cpu: "2"                        # container can use more memory than limit but if it is continuous it will terminate | If limit not specified, \n          memory: "1Gi"                     it can use all of node\'s memory and finally get killed | If limit range is defined for namespace it uses it as default\n      securityContext:\n        capabilities:\n          add: [ "MAC_ADMIN" ]\n      volumeMounts:\n        - mountPath: /opt                 # this will be in sync\n          name: volume_name\n      env:                                # adding env variables\n        - name: APP_COLOR\n          value: pink\n        - name: APP_COLOR\n          valueFrom:\n            configMapKeyRef:\n              name: config_map_name\n              key: KEY1\n        - name: APP_COLOR\n          valueFrom:\n            secretKeyRef:\n              name: secret_name\n              key: KEY1\n      envFrom:\n        - configMapRef:\n            name: config_map_name\n        - secretRef:\n            name: secret_name\n      tolerations:\n        - key: "app"\n          operator: "Equal"\n          value: "blue"\n          effect: "NoSchedule"\n      nodeSelector:                         # label node with same\n        key: value\n      readinessProbe:\n        periodSeconds: 5\n        initialDelaySeconds: 15\n        failureThreshold: 8\n        httpGet:\n          path: /api/ready\n          port: 5000\n        tcpSocket:\n          port: 8080\n        exec:\n          command:\n            - cat\n            - /app/is_ready\n      livenessProbe:\n        periodSeconds: 5\n        initialDelaySeconds: 15\n        failureThreshold: 8\n        httpGet:\n          path: /api/ready\n          port: 5000\n        tcpSocket:\n          port: 8080\n        exec:\n          command:\n            - cat\n            - /app/is_ready\n')),(0,i.kt)("h3",{id:"config-map"},"Config Map"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k create configmap config_map_name --from-literal=KEY1=VALUE1 --from-literal=KEY2=VALUE2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k create configmap config_map_name --from-file=file_name.properties"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config_map_name\nspec:\n  key1: value1\n  key2: value2\n")),(0,i.kt)("h3",{id:"secrets"},"Secrets"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"echo -n 'encode' | base64")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"echo -n 'decode' | base64 --decode")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k create secret secret_name --from-literal=KEY1=VALUE1 --from-literal=KEY2=VALUE2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k create secret secret_name --from-file=file_name.properties"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: secret_name\nspec:\n  key1: value1\n  key2: value2\n")),(0,i.kt)("h3",{id:"service-accounts"},"Service Accounts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"when service account is created a token is generated as secret | This used happen before kube 1.24, after\n1.24 you can create token using `k create token service_account_name` this prints token with expiry time\nToken can be passed as a bearer token while calling kube apis\nEach namespace has its own service account\nPod when created is mounted with volume having token created via token request api(has expiry)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," k create sa service_account_name\n k create token <sa_name>\n")),(0,i.kt)("p",null,"Manually create long-lived token for service account\nAnnotate secret with kubernetes.io/service-account.name: <sa_name> and controller will auto-inject token inside the secret"),(0,i.kt)("h3",{id:"jobs--cronjob"},"Jobs & CronJob"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k create job job_name --image=image_name -- command")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'k create cronjob cron_name --image=image_name --schedule="* * * * *"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: job_name\nspec:\n  completions: 3                            ----\x3e no. of successful job completions | new pods are created until this number is reached\n  parallelism: 3                            ----\x3e creates pods in parallel\n  template:\n    spec:\n      containers:\n        - name: container_name\n          image: image_name\n          command:\n            - cmd1\n      restartPolicy: Never\n\n---\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: cron-job-name\nspec:\n  schedule: "*/1 * * * *"\n  jobTemplate:\n    spec:\n      completions: 3\n      parallelism: 3\n      template:\n        spec:\n          containers:\n            - name: container_name\n              image: image_name\n          restartPolicy: Never\n')),(0,i.kt)("h3",{id:"service"},"Service"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: v1\nkind: Service\nmetadata:\n  name: service_name\nspec:\n  type: NodePort\n  ports:\n    - targetPort: 80                                   # container's port\n      port: 80                                         # service port\n      nodePort: 30008\n  selector:\n      key: value\n      key1: value1\n")),(0,i.kt)("h5",{id:"load-balancing-through-services-is-done-in-random-fashion"},"Load Balancing through services is done in random fashion"),(0,i.kt)("h5",{id:"clusterip--creates-a-virtual-ip"},"ClusterIP : creates a virtual ip"),(0,i.kt)("h5",{id:"loadbalancer"},"LoadBalancer"),(0,i.kt)("h5",{id:"nodeport-range-30000---32767-exposes-node-port-for-every-node-if-pods-are-distributed"},"NodePort (Range: 30000 - 32767): Exposes node port for every node if pods are distributed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k expose pod pod_name --port=port_number --name=svc_name"),"        ----\x3e create cluster ip service with pod's label as selectors")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k create svc clusterip svc_name --tcp=?:?"),"                       ----\x3e create cluster ip service with selector's as app=svc_name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k expose pod pod_name --port=80 --type=NodePort"),"                 ----\x3e create node port service with pod's label as selectors")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"k create svc nodeport svc_name --tcp=?:? --node-port=node_port"),"  ----\x3e create nodeport svc with defined node port but doesn't use pod's labels as selectors"))),(0,i.kt)("h3",{id:"ingress"},"Ingress"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress_name\nspec:\n  rules:\n    - host: host_name\n      http:\n        paths:\n          - path: /path1\n            pathType: Prefix\n            backend:\n              service:\n                name: svc_name\n                port:\n                  number: port_number\n          - path: /path2\n            pathType: Prefix\n            backend:\n              service:\n                name: svc_name2\n                port:\n                  number: port_number2\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'kubectl create ingress <ingress-name> --rule="host/path=service:port"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'kubectl create ingress ingress-test --rule="wear.my-online-store.com/wear*=wear-service:80"'))),(0,i.kt)("h3",{id:"network-policy"},"Network Policy"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: name\n  namespace: pod_namespace\nspec:\n  podSelector:\n    matchLabels:\n      key: value\n  policyTypes:                           # If only policyTypes is present it blocks all Ingress & Egress traffic\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - podSelector:\n            matchLabels:\n              key: other-pod\n          namespaceSelector:             # If only namespace selector defined all pods under given ns will be able to access\n            matchLabels:\n              name: other_ns_name\n        - ipBlock:\n            cidr: 192.168.5.10/32\n      ports:\n        - protocol: TCP\n          port: 3306                     # incoming traffic on port\n  egress:\n    to:\n      - ipBlock:\n          cidr: 192.168.5.10/32\n    ports:\n      - protocol: TCP\n        port: 80                         # port on server ip\n")),(0,i.kt)("h3",{id:"volumes"},"Volumes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: pv_name\nspec:\n  accessModes:\n    - ReadWriteOnce\n    - ReadOnlyMany\n    - ReadWriteMany\n  capacity:\n    storage: 1Gi\n  persistentVolumeReclaimPolicy: Recycle | Retain | Delete\n  awsElasticBlockStore:\n    volumeID: volume_id\n    fsType: ext4\n  hostPath:\n    path: "/mnt/data"\n\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: pvc_name\nspec:\n  storageClassName: manual | normal\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 500Mi\n\n')),(0,i.kt)("h3",{id:"kube-api-server--api-groups"},"Kube API Server & API Groups"),(0,i.kt)("h5",{id:"edit-the-kube-apiserver-static-pod-configured-by-kubeadm-to-pass-in-the-user-details"},"Edit the kube-apiserver static pod configured by kubeadm to pass in the user details."),(0,i.kt)("h5",{id:"the-file-is-located-at-etckubernetesmanifestskube-apiserveryaml"},"The file is located at /etc/kubernetes/manifests/kube-apiserver.yaml"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k config use-context context_name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k config view")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k config set-context --current --namespace=name"))),(0,i.kt)("h3",{id:"api-groups"},"API Groups"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k proxy"),"     ---\x3e exposes kube api on local"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k api-resources --namespaced=true ")),(0,i.kt)("li",{parentName:"ul"},"Actions- list, get, create, update, delete, watch")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-apiserver\n  namespace: kube-system\nspec:\n  containers:\n    - command:\n        - kube-apiserver\n        - --authorization-mode=Node,RBAC\n          <content-hidden>\n        - --basic-auth-file=/tmp/users/user-details.csv\n      image: k8s.gcr.io/kube-apiserver-amd64:v1.11.3\n      name: kube-apiserver\n      volumeMounts:\n        - mountPath: /tmp/users\n          name: usr-details\n          readOnly: true\n  volumes:\n    - hostPath:\n        path: /tmp/users\n        type: DirectoryOrCreate\n      name: usr-details\n")),(0,i.kt)("h3",{id:"roles"},"Roles"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k create role role_name --verb=get,ist --resources=pods,pods/status --resource-name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k create rolebinding role_binding_name --clusterrole=cluster_role_name --user=user_name --namespace=ns_name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k auth can-i <cmd> -as user"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'kind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: default\n  name: pod-reader\nrules:\n  - apiGroups: [""] # "" indicates the core API group\n    resources: ["pods", "pods/log"]\n    verbs: ["get", "watch", "list"] | # ["*"] --\x3e everything\n\n---\n# This role binding allows "user1" to read pods in the "default" namespace.\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: read-pods\n  namespace: default\nsubjects:\n  - kind: User\n    name: user1 # Name is case-sensitive\n    apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role #this must be Role or ClusterRole\n  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to\n  apiGroup: rbac.authorization.k8s.io\n')),(0,i.kt)("h3",{id:"api-versions"},"API Versions"),(0,i.kt)("h5",{id:"vxalphay----vxbetay----vx"},"vXalphaY --\x3e vXbetaY --\x3e vX"),(0,i.kt)("h5",{id:"alpha---not-enabled-by-default"},"Alpha -> Not enabled by default"),(0,i.kt)("h5",{id:"beta---enabled-by-default"},"Beta -> Enabled by default"),(0,i.kt)("h5",{id:"gastable---enabled-by-default"},"GA(Stable) -> Enabled by default"),(0,i.kt)("h5",{id:"preferred-version---version-k8s-will-use-while-retrieving-info"},"Preferred version -> version k8s will use while retrieving info"),(0,i.kt)("h5",{id:"storage-version---version-objects-will-converted-to-while-storing-in-etcd-cluster"},"Storage Version -> version objects will converted to while storing in etcd cluster"),(0,i.kt)("h3",{id:"api-deprecations"},"API Deprecations"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Api elements can be removed only by incrementing API version of group"),(0,i.kt)("li",{parentName:"ol"},"Api objects must be able to round trip between API versions in a given release without information loss\nwith exception of whole REST resources which don't exist in some version"),(0,i.kt)("li",{parentName:"ol"},"Other than the most recent API version in each track, older API version must be supported after their announced\ndeprecation for a duration of no less than-\na. GA (stable)- 12 months or 3 releases (whichever is longer)\nb. Beta - 9 months or 3 releases (whichever is longer)\nc. Alpha - 0 releases\nIn Kubernetes versions -> X.Y.Z\nWhere X stands for major, Y stands for minor and Z stands for patch version.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"k convert -f <old_file> --output-version group/version")),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"--runtime-config={api-group}/{version}"),"  --\x3e enable new version")),(0,i.kt)("h3",{id:"helm"},"Helm"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"helm repo add repository-name url\nhelm repo remove repository-name\nhelm repo update\nhelm list\nhelm search hub package_name\nhelm search repo package_name\nhelm show chart repo/package\nhelm show values repo/package\n\nhelm get manifest release_name\nhelm install release_name chart_name\nhelm status release_name\nhelm upgrade release_name repo/package\nhelm history release_name\nhelm rollback release_name version\nhelm uninstall release-name\nhelm pull --untar repo/chart_name\n")))}u.isMDXComponent=!0}}]);